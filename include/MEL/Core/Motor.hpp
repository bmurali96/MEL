#pragma once

#include <MEL/Core/Actuator.hpp>
#include <MEL/Daq/Input.hpp>
#include <MEL/Daq/Output.hpp>
#include <MEL/Utility/Time.hpp>

namespace mel {

//==============================================================================
// CLASS DECLARATION
//==============================================================================

/// Encapsulates a (typically DC) Motor actuator
class Motor : public Actuator {

    enum CurrentLimitMode {
        None,
        Saturate,
        I2T
    };

public:

    /// Default constructor
    Motor();

    /// Constructor for hard current limitied motor with DO enable/disable channel
    Motor(std::string name, double kt, double amp_gain,
        Output<voltage>::Channel ao_channel, Output<logic>::Channel do_channel, EnableMode enable_mode,
        double hard_current_limit);

    /// Constructor for I2T current limited motor with DO enable/disable channels
    Motor(std::string name, double kt, double amp_gain,
        Output<voltage>::Channel ao_channel, Output<logic>::Channel do_channel, EnableMode enable_mode,
        double continuous_current_limit, double peak_current_limit, Time i2t_time);

    /// Constructor for hard current limitied motor with DO enable/disable channel and current sensing
    Motor(std::string name, double kt, double amp_gain,
        Output<voltage>::Channel ao_channel, Output<logic>::Channel do_channel, EnableMode enable_mode, Input<voltage>::Channel ai_channel,
        double hard_current_limit);

    /// Constructor for I2T current limitied motor with DO enable/disable channel and current sensing
    Motor(std::string name, double kt, double amp_gain,
        Output<voltage>::Channel ao_channel, Output<logic>::Channel do_channel, EnableMode enable_mode, Input<voltage>::Channel ai_channel,
        double continuous_current_limit, double peak_current_limit, Time i2t_time);

    /// Enables the Motor using the associated digital output channel
    bool enable() override;

    /// Disables the Motor using using the associated digital output channel and writes zero to the associated analog output channel
    bool disable() override;

    /// Set the desired current to be generated at the Motor, calls limit_current(), converts from current to amplifier voltage command, and sets voltage on associated analog output channel
    void set_current(double new_current);

    /// Sets the desired torque to be generated at the Motor, converts from torque to current, and calls set_current()
    void set_torque(double new_torque) override;

    /// Returns the commanded current resulting from the commanded current
    double get_current_command();

    /// Returns the limited current resulting from the current limit mode operation
    double get_current_limited();

    /// Gets the current measured by the current sensor of the current amplifier
    double get_current_sense();

    /// Returns the attempted command current since the last call to set_current()
    double get_torque_command() override;

    /// Returns the limited command current since the last call to set_current()
    double get_torque_limited() override;

private:

    void limit_current_saturate();
    void limit_current_i2t();
    void reset_i2t_limiter();

private:

    double kt_; ///< torque constant of the Motor
    double amp_gain_; ///< the conversion rate between voltage sent to the analog output channel and the current generated by the amplifier [A/V]

    double continuous_current_limit_;
    double peak_current_limit_;
    Time i2t_time_;

    CurrentLimitMode current_limit_mode_; ///< the current limiting mode

    double i2t_integrand_;
    double i2t_integral_;

    Time i2t_time_now_;
    Time i2t_time_last_;

    double current_; ///< stores the desired Motor current since the last call to set_current()
    double limited_current_;

    double current_sense_;   ///< store the measured current since the last call to get_current_sense()
    bool has_current_sense_; ///< whether or not the Motor comes with current sensing, i.e., whether or not the ai_channel is provided

    Output<logic>::Channel   do_channel_;  ///< the DAQ digital output channel bound to this Motor (for enable/disable)
    Output<voltage>::Channel ao_channel_;  ///< the DAQ analog output channel bound to this Motor (for commanding torque/current)
    Input<voltage>::Channel  ai_channel_;  ///< the DAQ analog input channel bound to this Motor (for current sensing)

};

} // namespace mel

//==============================================================================
// CLASS DOCUMENTATION
//==============================================================================
