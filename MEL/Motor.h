#pragma once
#include "Actuator.h"

namespace mel {

    class Motor : public Actuator {

    public:

        // CONSTRUCTOR(S) / DESTRUCTOR(S)

        Motor();
        Motor(std::string name, double kt, double current_limit, double amp_gain, Daq::Ao ao_channel);
        Motor(std::string name, double kt, double current_limit, double amp_gain, Daq::Ao ao_channel, Daq::Do do_channel, EnableMode enable_mode);
        Motor(std::string name, double kt, double current_limit, double amp_gain, Daq::Ao ao_channel, Daq::Do do_channel, EnableMode enable_mode, Daq::Ai ai_channel);

        // PUBLIC FUNCTIONS

        void set_torque(double new_torque) override; // set the desired torque to be generated at the Motor, convert from torque to current, and call set_current()
        double get_current_sense(); // get the current measured by the current sensor of the current amplifier
        
        void enable() override; // set this Motor to be enabled using the associated digital output channel
        void disable() override; // set this Motor to be disabled using the associated digital output channel
        
        // PUBLIC VARIABLES

        const double kt_; // torque constant of the Motor
        const double current_limit_; // hard limit to be applied to the desired current of the motor
        const double amp_gain_; // the conversion rate between voltage sent to the analog output channel and the current generated by the amplifier [A/V]

        bool is_enable_; // whether or not the Motor has been enabled
        bool has_current_sense_; // whether or not the Motor comes with current sensing, i.e., whether or not the ai_channel is provided
 

    private:
        
        // PRIVATE FUNCTIONS

        void set_current(double new_current); // set the desired current to be generated at the Motor, call limit_current(), convert from current to amplifier voltage command, and set voltage on associated analog output channel
        double saturate_current(double new_current); // apply a saturation at +/- current_limit_ to the desired current

        // PRIVATE VARIABLES

        Daq::Ao ao_channel_; // the DAQ analog output channel bound to this Motor (for commanding torque/current)
        Daq::Do do_channel_; // the DAQ digital output channel bound to this Motor (for enable/disable)
        Daq::Ai ai_channel_; // the DAQ analog input channel bound to this Motor (for current sensing)

        // STATE VARIABLES

        double current_; // stores the desired Motor current since the last call to set_current()
        double limited_current_; // stores the limited Motor current since the last call to set_current() 
        double current_sense_; // store the measured current since the last call to get_current_sense()

        

    };
}